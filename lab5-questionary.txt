=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.

=== Q Did you have to do anything else to ensure that the I/O
===   privilege setting is saved and restored properly when you
===   subsequently switch from one environment to another? Why? 
===   (free form)
No, each environment got it's own flags which are saved in every context switch.
the only environment that got the I/O privileges is the File System we initialise in init.c

=== Q How long approximately did it take you to do this lab?
===   (number of hours for all partners combined)
80

=== Q We simplified the file system this year with the goal of making
===   more time for the final project. Do you feel like you gained a
===   basic understanding of the file I/O in JOS? Feel free to suggest
===   things we could improve. 
===   (free form)
No it didn't, without doing the first chalenge we would have never known how the FS really works.
====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
1 'st challenge, extending the file system to support write access

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
fs/test.c
fs/fs.c
fs/bc.c
fs/serv.c
lib/file.c

=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
We've merged our files with the MIT 5th lab, then done all the 5th mit lab.
Thus implementing the write access.
The exercises were:
Exercise 2: Buffer cache.
Exercise 3: Block bitmap
Exercise 4: File operations.
Exercise 6: Write operations.
We did run all the tests provided by the mit lab and passed them.
Alot new functions were added by the mit lab, which we did use.
Thank You.


