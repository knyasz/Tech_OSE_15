Question1:
How did you structure your transmit implementation?
In particular, what do you do if the transmit ring is full?

Answer1: 
- Added error E_TX_FULL = 16,   // Transfer queue is full
to inc/error.h
The error is returned via syscall to user environment (output.c),
which spins the try_send() function until driver succseeds
to empty some descriptros from the Queue.

Question2:
How did you structure your receive implementation?
In particular, what do you do 
if the receive queue is empty 
and a user environment requests the next incoming packet?

Answer2:
- Added error E_RX_EMPTY = 17,   // Receive queue is empty
to inc/error.h
The error is returned via syscall to user environment (inpul.c).
On such error - user yields the processor in order to earn some wait time.



Challenge:
We've choosen challenge 1:
Write the code to load the E1000's MAC address out of the EEPROM.

SW access procedure described in developers manuall 5.3.1
To fetch "Ethernet Addtess" consists of 3 words as explained in 5.6.1
(each word has it's address)
each time we write another "word address" to EERD:ADDR field (13.4.4)
to get another part of the MAC.
During RX Init,
we copy these parts imedietly to RAL/RAH of the e1000
as described in 14.4 (Receive Initialization) 
